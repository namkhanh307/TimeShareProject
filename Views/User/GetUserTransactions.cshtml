@model List<TimeShareProject.Models.Transaction>

@{
    var layout = "_Layout.cshtml";

    if (User.Identity.IsAuthenticated)
    {
        var userRole = User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;

        switch (userRole)
        {
            case "1": // Admin
                layout = "_AdminLayout.cshtml";
                break;
            case "2": // Staff
                layout = "_AdminLayout.cshtml";
                break;
            case "3": // User
                layout = "_Layout.cshtml";
                break;
            default:
                break;
        }
    }

    Layout = $"~/Views/Shared/{layout}";
}

<br />
<h2>Your Transactions</h2>

@if (Model != null && Model.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Register Date</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Transaction Code</th>
                <th>Type</th>
                <th>Pay</th>
                <th>Deadline</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in Model)
            {
                <tr>
                    <td>@transaction.Date</td>
                    <td>@transaction.Amount</td>
                    <td>@(transaction.Status == true ? "Paid" : "Not Paid")</td>
                    <td>@transaction.TransactionCode</td>
                    <td>
                        @{
                            string transactionType = "";
                            switch (transaction.Type)
                            {
                                case -1:
                                    transactionType = "Reserve";
                                    break;
                                case 0:
                                    transactionType = "Deposit";
                                    break;
                                case 1:
                                    transactionType = "First Payment";
                                    break;
                                case 2:
                                    transactionType = "Second Payment";
                                    break;
                                case 3:
                                    transactionType = "Third Payment";
                                    break;
                                default:
                                    transactionType = "Unknown";
                                    break;
                            }
                        }
                        @transactionType
                    </td>
                    @if (transaction.Status == true)
                    {
                        <td>You have paid this field!</td>
                    }
                    else
                    {
                        <td id="paypal-button-container-@transaction.Id" style="max-width:1000px;"></td>
                    }
                    <td>You should pay this field before @transaction.DeadlineDate</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No transactions found for this user.</p>
}

@section Scripts {
    <script src="https://www.paypal.com/sdk/js?client-id=AcK_cVj4laQY2VN5ZHxfaXRgs-VNDVmx9ifLV-3llbR-pQPzy48YjTgzzbZ7C35PgV6GfP9uNWjLXZ9d"></script>
    <script>
        $(document).ready(function () {
            function renderPayPalButton(containerId, transaction) {
                paypal.Buttons({
                    style: {
                        disableMaxWidth: true
                    },
                    createOrder() {
                        // This function sets up the details of the transaction, including the amount and line item details.
                        return fetch("/Reservations/create-paypal-order", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(transaction)
                        }).then((response) => {
                            if (!response.ok) {
                                return response.json().then((err) => {
                                    throw err;
                                });
                            }
                            return response.json();
                        })
                            .then((order) => order.id)
                            .catch(err => {
                                alert(err.message);
                            });
                    },
                    onApprove: (data, actions) => {
                        // This function captures the funds from the transaction.
                        return fetch(`/Reservations/capture-paypal-order?orderId=${data.orderID}`, {
                            method: "POST",
                        }).then((response) => {
                            if (!response.ok) {
                                return response.json().then(err => { throw err; });
                            }
                            window.location.href = "/User/GetUserReservation";
                        })
                            .catch(err => {
                                alert(err.message);
                            });
                    }
                }).render('#' + containerId);
            }

            // Loop through transactions and render PayPal button for each
        @foreach (var transaction in Model)
        {
            <text>
                    renderPayPalButton('paypal-button-container-@transaction.Id', @Html.Raw(Json.Serialize(transaction)));
            </text>
        }
                                        });
    </script>
}